/**
 *  milk-minder
 *
 *  Copyright 2014 Wesley Bornor
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "milk-minder", namespace: "wbornor@gmail.com", author: "Wesley Bornor") {
		

		fingerprint profileId: "0104", deviceId: "0302", inClusters: "0000,0001,0003,0009,0402,0405"
	}

	// simulator metadata
	simulator {        
        for (int i = 0; i <= 100; i += 10) {
			status "${i}": "fsr1: ${i}"
		}
	}

	// UI tile definitions
	tiles {
	        standardTile("fsr1", "device.fsr1", width: 2, height: 2, canChangeIcon: true, canChangeBackground: true, inactiveLabel: false) {
	            state "--", label: '${name}', backgroundColor: "#bc2323"
	            state "LOW", label: '${name}', backgroundColor: "#bc2323" 
		    state "MEDIUM", label: '${name}', backgroundColor: "#1e9cbb"
	            state "FULL", label: '${name}', backgroundColor: "#79b821"
		}

		main(["fsr1"])
		details(["fsr1"])
	}
}

// Parse incoming device messages to generate events
def parse(String description) {
    log.debug "description: ${description}"
    if(!description?.startsWith("fsr")){
      description = zigbee.parse(description)?.text
    }
    log.debug "Parsed description: ${description}"
	if(description == "ping"){
      log.debug ("ping")
      return null
    }
    def name = parseName(description)
    def value = parseValue(description)
    def result = createEvent(name: name, value: value)
    log.debug "Parse returned ${result?.descriptionText}"

    return result
}

private String parseName(String description) {
    if (description?.startsWith("fsr1: ")) {
      return "fsr1"
    }
    null
}

private String parseValue(String description) {
  if (description?.startsWith("fsr1: ")) {
    log.debug ("payload: ${description}")
    def fsr = (description - "fsr1: ").trim()
    if (fsr.isNumber()) {
       fsr = Math.round(new BigDecimal(fsr))
    }
    if ( fsr == 0 ) {
      	return "--"
    } else if ( fsr < 20 ) {
      	return "LOW"
    } else if ( fsr < 70 ) {
	return "MEDIUM"
    } else {
      	return "FULL"
    }
  }
  null
}
