/**
 *  freshpad
 *
 *  Copyright 2015 Wesley Bornor
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
metadata {
	definition (name: "freshpad", namespace: "wbornor@gmail.com", author: "Wesley Bornor") {
		attribute "level", "string"
        
        fingerprint profileId: "0104", deviceId: "0302", inClusters: "0000,0001,0003,0009,0402,0405"
	}

	// simulator metadata
	simulator {        
        for (int i = 0; i <= 100; i += 10) {
			status "${i}": "fp: ${i}"
		}
	}

	// UI tile definitions
	tiles {
	    standardTile("freshpad", "device.level", width: 2, height: 2, canChangeIcon: true, canChangeBackground: true) {
            state '--', label: '${name}', backgroundColor: "#bc2323", defaultState: true
	        state 'LOW', label: '${name}', backgroundColor: "#bc2323" 
		    state 'MEDIUM', label: '${name}', backgroundColor: "#1e9cbb"
	        state 'FULL', label: '${name}', backgroundColor: "#79b821"
		}

		main "fp"
		details(["fp"])
	}
}

// Parse incoming device messages to generate events
def parse(String description) {
    log.debug "description: ${description}"
    if(!description?.startsWith("fp")){
      description = zigbee.parse(description)?.text
    }
    log.debug "Parsed description: ${description}"
	if(description == "ping"){
      log.debug ("ping")
      return null
    }
    // def name = parseName(description)
    def name = "level"
    log.debug "name: " + name
    def value = parseValue(description)
    log.debug "value: " + value
    def linkText = "TwoLiter"
    def result = createEvent(name: name, value: value)
    log.debug "Parse returned ${result?.descriptionText}"

    return result
}

private String parseName(String description) {
    if (description?.startsWith("fp:0")) {
      return "2Liter"
    } else if (description?.startsWith("fp:1")) {
      return "MilkGal"
    }
    log.debug "Could not recognize item"
    null
}

private String parseValue(String description) {
  if (description?.startsWith("fp:")) {
    log.debug ("payload: ${description}")
    def fp = description.substring(description.lastIndexOf(":") + 1).trim()
    if (fp.isNumber()) {
       fp = Math.round(new BigDecimal(fp))
    }
    if ( fp == 0 ) {
      	return "--"
    } else if ( fp < 20 ) {
      	return "LOW"
    } else if ( fp < 70 ) {
	return "MEDIUM"
    } else {
      	return "FULL"
    }
  }
  null
}
